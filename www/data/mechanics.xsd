<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:simpleType name="trueOnly">
        <xs:restriction base="xs:string">
            <xs:enumeration value="true" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="currency">
        <xs:restriction base="xs:string">
            <xs:enumeration value="crown" />
            <xs:enumeration value="lune" />
            <xs:enumeration value="kika" />
            <xs:enumeration value="noble" />
            <xs:enumeration value="ren" />
            <xs:enumeration value="sheasutorq" />
            <xs:enumeration value="orla" />
            <xs:enumeration value="ain" />
        </xs:restriction>
    </xs:simpleType>

    <!--
        *** ROOT ELEMENT ***
    -->
    <xs:element name="mechanics">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="sections">
                    <xs:annotation>
                        <xs:documentation>The list of sections that must to be mechanized.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="section" type="section" minOccurs="0" maxOccurs="unbounded" />
                        </xs:sequence>
                        <xs:attribute name="count" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>Optional. It's the number of sections on the book, and the default value is "350"</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="book" type="xs:integer" use="required">
                <xs:annotation>
                    <xs:documentation>Number of the book.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <!--
        *** SECTION ***
    -->

    <xs:complexType name="section">
        <xs:annotation>
            <xs:documentation>Root for rules to be executed on a given section.</xs:documentation>
        </xs:annotation>
        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The section id.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="pickMaximum" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Optional. It's the maximum number of object you can pick on the section. Objects are grouped by it's id. So if there are 2 meals, if you pick them both, it counts as a one object picked. This is for "Equipment" sections, where meals and fireseeds are grouped.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Optional. Show a title for the section.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <!--
        *** RULES ***
    -->

    <xs:complexType name="setSkills">
        <xs:annotation>
            <xs:documentation>Game setup: The player selects the initial Endurance and Combat Skill.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="setKaiName">
        <xs:annotation>
            <xs:documentation>Game setup: The player selects their Kai Name.</xs:documentation>
        </xs:annotation>
    </xs:complexType>
    
    <xs:complexType name="restoreDeliveranceUse">
        <xs:annotation>
            <xs:documentation>Execute once only. Magnakai and later: Action Chart button to restore +X EP after Y days will available again.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="resetNewOrderCuringEPRestoredUse">
        <xs:annotation>
            <xs:documentation>Execute once only. New Order: Reset counter of EP restore by Curing, limited to 10 per book.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="resetNewOrderDisabledDisciplines">
        <xs:annotation>
            <xs:documentation>Execute once only. New Order: Reset any disabled disciplines in the current book.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="damageKaiWeapon">
        <xs:annotation>
            <xs:documentation>Execute once only. New Order: PERMANENTLY damage the player's Kai Weapon</xs:documentation>
        </xs:annotation>
        <xs:attribute name="damage" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Amount to adjust Kai Weapon CS (should be negative for damage)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="setDisciplines">
        <xs:annotation>
            <xs:documentation>Game setup: The player selects the Kai disciplines.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="pick">
        <xs:annotation>
            <xs:documentation>Pick an object. If the object cannot be picked (ex, the backpack is full), the object will be available on the section.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="objectId" type="xs:string">
            <xs:annotation>
                <xs:documentation>The identifier of the object to pick.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class">
            <xs:annotation>
                <xs:documentation>This for counters. If you are going to pick meals (="meal"), money (="money") or "arrow".</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="meal" />
                    <xs:enumeration value="arrow" />
                    <xs:enumeration value="money" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="count" type="xs:string">
            <xs:annotation>
                <xs:documentation>Only if class is "meal", "money" or "arrow". Expression with the number of coins / meals to pick.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Required, for ugly reasons, when there are two or more pick rules with the same object id on a section.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currency" type="currency">
            <xs:annotation>
                <xs:documentation>Optional, and only for class="money". Picked coins currency, default is "crown". Values can be "crown", "lune" or "kika".</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="excessToKaiMonastry" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Only if class is "money". If money exceed 50, the excess is store in kai monastry.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="tag">
        <xs:annotation>
            <xs:documentation>Add a tag stored in the action chart.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The identifier of the tag.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="randomTable">
        <xs:annotation>
            <xs:documentation>Explains what to do when a random table link is clicked. When the link is clicked, the inner rules to this tag will be execute. When the link is clicked, the number got will be saved as state of the rule.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="case">
                <xs:annotation>
                    <xs:documentation>Executed conditionally for the random number got.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
                    <xs:attribute name="value" type="xs:integer">
                        <xs:annotation>
                            <xs:documentation>Executed when random number EQUALS the given value</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="from" type="xs:integer">
                        <xs:annotation>
                            <xs:documentation>Executed when random number GREATER OR EQUALS the given value</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="to" type="xs:integer">
                        <xs:annotation>
                            <xs:documentation>Executed when random number LOWER OR EQUALS the given value</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:group ref="any_rule" />
        </xs:choice>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>needed only if there is more than one random table link on the section. It will select the index (zero based) of the random table link to which it refers.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Create a random table link on the given text.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="zeroAsTen" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If "true", the zero value will be returned as ten.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="randomNumber">
        <xs:annotation>
            <xs:documentation>Choose a random number and store it</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="chooseEquipment">
        <xs:annotation>
            <xs:documentation>Game setup: Choose equipment.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="text" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Text to show on the UI ("Pick X objects before continuing")</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="test">
        <xs:annotation>
            <xs:documentation>This is used to execute rules conditionally. It will test a condition, and, if it's true, it will run the inner rules to this tag.</xs:documentation>
            <xs:documentation>If there is more than one condition on the tag, if any of them is true, the inner rules will be executed (run like OR).</xs:documentation>
            <xs:documentation>To make AND conditions, embed test tags.</xs:documentation>
        </xs:annotation>
        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
        <xs:attribute name="hasDiscipline">
            <xs:annotation>
                <xs:documentation>Do the player has any of the disciplines?</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:pattern value="(sixthsns|camflage|tracking|mindomtr|anmlknsp|healing|hunting|mindshld|mndblst|wepnskll|wpnmstry|anmlctrl|curing|invsblty|psisurge|psiscrn|nexus|dvnation|anmlmstr|deliver|assimila|kaisurge|kaiscrn|gnosis|magi|alchemy|hntmstry|pthmnshp|astrolgy|herbmst|element|bardsman|\|)*"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="hasObject" type="xs:string">
            <xs:annotation>
                <xs:documentation>Do the player carry any of the objects?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="hasCurrentWeapon" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Is the player currently armed with a weapon?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="expression" type="xs:string">
            <xs:annotation>
                <xs:documentation>Is the expression true?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="sectionVisited" type="xs:string">
            <xs:annotation>
                <xs:documentation>Has some of the sections been visited in the current book?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currentWeapon" type="xs:string">
            <xs:annotation>
                <xs:documentation>Is the current weapon (hand-to-hand) some of these kinds?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="weaponskillActive" type="trueOnly">
            <xs:annotation>
                <xs:documentation>Has the player "Weaponskill" (current book discipline, no loyalty bonus) with the current weapon?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="combatsWon" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Have been won all combats on this section (or not)?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="combatsActive" type="trueOnly">
            <xs:annotation>
                <xs:documentation>Do some combat still active (not won and not eluded)?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isChoiceEnabled" type="xs:string">
            <xs:annotation>
                <xs:documentation>Is the choice for the given section enabled?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="canUseBow" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>The player has a bow and one arrow (or not)?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="hasWeaponType" type="xs:string">
            <xs:annotation>
                <xs:documentation>The player has some weapon of some of the given types?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="hasCircle" type="xs:string">
            <xs:annotation>
                <xs:documentation>The player has this Lore Circle (see loreCircle.ts for codes)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="hasWeaponskillWith" type="xs:string">
            <xs:annotation>
                <xs:documentation>The player has "Weaponskill" (current book discipline, no loyalty bonus) with the given weapon type?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currentWeaponSpecial" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Current weapon is a Special Item (or not)?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currentWeaponMagical" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Current weapon has a CS or EP effect (or not)?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isGlobalRuleRegistered" type="xs:string">
            <xs:annotation>
                <xs:documentation>A global rule with a given id is currently registered?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="objectOnSection" type="xs:string">
            <xs:annotation>
                <xs:documentation>Some of these objects is available on the current section?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="pickedSomethingOnSection" type="xs:string">
            <xs:annotation>
                <xs:documentation>Did the player pick something on the given section?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="soldSomethingOnSection" type="xs:string">
            <xs:annotation>
                <xs:documentation>Did the player sell something on the given section?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="sectionContainsText" type="xs:string">
            <xs:annotation>
                <xs:documentation>Does the current section contain this text?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="hasTag" type="xs:string">
            <xs:annotation>
                <xs:documentation>Does the player has one of the given tags?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="not" type="trueOnly">
            <xs:annotation>
                <xs:documentation>This will negate the current test. So if all of these conditions are false, the inner rules will be executed</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="hasDessiStone" type="trueOnly">
            <xs:annotation>
                <xs:documentation>Test if the current weapon has the dessi stone (book 17)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="choiceState">
        <xs:annotation>
            <xs:documentation>Enable or disable section choices</xs:documentation>
        </xs:annotation>
        <xs:attribute name="section" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The section id to enable/disable. "all" for all section choices</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="set" use="required">
            <xs:annotation>
                <xs:documentation>"enabled" to enable the choice. "disabled" to disable.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="enabled" />
                    <xs:enumeration value="disabled" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="object">
        <xs:annotation>
            <xs:documentation>Make an object available on the section. The player can pick / buy it.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="objectId" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The available object id</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="price" type="xs:string">
            <xs:annotation>
                <xs:documentation>If it's set, the price to buy the object (not free)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currency" type="currency">
            <xs:annotation>
                <xs:documentation>If it's set, the currency of the price to buy the object. Default is "crown".</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="count" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Number of available objects</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useOnSection" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the player will can use the object without picking it</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="unlimited" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, there is an unlimited number of objects of this class on the section</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Required, for ugly reasons, when there are two or more objects with the same object id on a section</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="combat">
        <xs:annotation>
            <xs:documentation>The combat tag add modifiers to some combat of the current section.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Index (zero based) of the combat to which it refers</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="combatSkillModifier" type="xs:string">
            <xs:annotation>
                <xs:documentation>Absolute bonus (positive or negative) for player's combat skill on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enemyCombatSkillModifier" type="xs:string">
            <xs:annotation>
                <xs:documentation>Absolute bonus (positive or negative) for the enemy's combat skill on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="combatSkillModifierIncrement" type="xs:string">
            <xs:annotation>
                <xs:documentation>Bonus increment (positive or negative) for player's combat skill on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mindforceCS" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Bonus (negative) to the player's combat skill due to the enemy Mindblast. It will not be applied if the player has Mindshield / Psi-screen</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mindforceEP" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Endurance points lost by the player each turn, due to the enemy Mindblast. It will not be applied if the player has Mindshield / Psi-screen</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noMindblast" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the enemy is immune to Mindblast</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noPsiSurge" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the enemy is immune to Psi-Surge</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noKaiSurge" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the enemy is immune to Kai-Surge</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noKaiBlast" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the enemy is immune to Kai-Blast</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noKaiRay" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the enemy is immune to Kai-Ray</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mindblastBonus" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Special CS bonus to apply for Mindblast discipline on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="psiSurgeBonus" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Special CS bonus to apply for Psi-Surge discipline on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="kaiSurgeBonus" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Special CS bonus to apply for Kai-Surge discipline on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="kaiSurgeTurnLoss" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Special EP turn loss to apply for Kai/Psi-Surge discipline on this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noWeapon" type="xs:string">
            <xs:annotation>
                <xs:documentation>If true, the player cannot use any weapon on this combat. If a number, the player cannot use any weapon for that many turns</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="noObjectBonuses" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, no weapon or item bonuses will be applied</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="eludeTurn" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Turn number after which the player can evade the combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxEludeTurn" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Turn number after which the player cannot evade the combat anymore</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="eludeEnemyEP" type="xs:integer">
            <xs:annotation>
                <xs:documentation>The player can evade the combat once the enemy EP is at the value or below. eludeTurn has to be set</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="damageMultiplier" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>Player damage multiplier. Can have decimals (ex. "0.5")</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enemyMultiplier" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>Enemy damage multiplier. Can have decimals (ex. "0.5")</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enemyTurnLoss" type="xs:string">
            <xs:annotation>
                <xs:documentation>Extra E.P. lost by the enemy each turn. Should be negative or zero. Can be an expression.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="turnLoss" type="xs:nonPositiveInteger">
            <xs:annotation>
                <xs:documentation>Extra E.P. lost by the player each turn. Should be negative or zero</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="turnLossIfWounded" type="xs:nonPositiveInteger">
            <xs:annotation>
                <xs:documentation>Extra E.P. lost by the player, if the player has been wounded on that turn. Should be negative or zero</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fake" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>This is a fake combat. When it's finished, the player's endurance points lost will be restored</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="restoreFactor" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>Only applies if fake="true". Factor of the EP lost to restore after the combat. Default is 1.0 (100% of the EP lost)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="bow" type="trueOnly">
            <xs:annotation>
                <xs:documentation>It's a combat with bow? (false = hand-to-hand)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="disabledObjects" type="xs:string">
            <xs:annotation>
                <xs:documentation>Set objects that cannot be used on this combat. "none" to enable all objects previously disabled.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fromSection" type="xs:string">
            <xs:annotation>
                <xs:documentation>Imports the combat from another section to be continued in this section (currently only working for sections with 1 combat)</xs:documentation>
            </xs:annotation>
        </xs:attribute>        
        <xs:attribute name="mindblastMultiplier" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>CS multiplier to apply to Mindblast/Psi-Surge/Kai-Surge attacks this combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mentalOnly" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, player cannot use any physical bonuses on this combat (any object bonus)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="immuneTurns" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Turns during which player will suffer no damage</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="immuneDamage" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Total damage which player is shielded from during the combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enemyImmuneTurns" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Turns during which the enemy will suffer no damage</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="permanentDamage" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, EP lost by the player on this combat will be permanent</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="allowPotions" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If false (true by default), don't allows usage of potions prior the combat</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="afterCombats">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute after the end of a combat.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
    </xs:complexType>

    <xs:complexType name="afterElude">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute after a combat is eluded.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
    </xs:complexType>

    <xs:complexType name="onInventoryEvent">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute after an action is made in the inventory.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
    </xs:complexType>

    <xs:complexType name="afterCombatTurn">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute after a combat turn.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />

        <xs:attribute name="turn" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The turn number after which the rules are executed.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="choiceSelected">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute after a choice is selected.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />

        <xs:attribute name="section" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The section id that, when selected, execute the rules.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="numberPickerChoosed">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute when the number is picked.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />

        <xs:attribute name="executeAtStart" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, and the number picker action button was clicked on a previous rendering, the "numberPickerChoosed" will be executed at the section startup.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="disciplinePickerChoosed">
        <xs:annotation>
            <xs:documentation>Optional event handler to execute when the discipline is picked.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
    </xs:complexType>
    
    <xs:complexType name="disableDiscipline">
        <xs:annotation>
            <xs:documentation>Disable an active player discipline</xs:documentation>
        </xs:annotation>
        <xs:attribute name="disciplineIndex" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The index of the discipline to be disabled in the player's list of disciplines.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="death">
        <xs:annotation>
            <xs:documentation>Game over. Kill the player.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="useDeliverance">
        <xs:annotation>
            <xs:documentation>Manually use the Deliverance +20 EP action.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="endurance">
        <xs:annotation>
            <xs:documentation>Increase / decrease the current player endurance.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="count" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The amount of endurance gained/lost</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="toast" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, a toast will be displayed with the endurance increase / decrease.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="permanent" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the endurance increase / decrease is permanent.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enemy" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the endurance change will apply to the current enemy.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="meal">
        <xs:annotation>
            <xs:documentation>The player must to have a meal on this section.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Required, for ugly reasons, when there are two or more meals on a section</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="huntDisabled" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, the player will not be allowed to use any hunting discipline, of any book series, on this meal.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="price" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>If set with a integer value, this will allows to buy a meat for the given price.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="resetSectionState">
        <xs:annotation>
            <xs:documentation>This will clear the state of the given section. Usefull if the player can return to that section, and there are rules with state there that must to be reexecuted</xs:documentation>
        </xs:annotation>
        <xs:attribute name="sectionId" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="message">
        <xs:annotation>
            <xs:documentation>Show (or hide) a text message at the end of a section.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text of the message to be displayed</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="xs:string">
            <xs:annotation>
                <xs:documentation>Id of the message.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="op">
            <xs:annotation>
                <xs:documentation>When used with id, "show" or "hide" the message associated to the id.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="show" />
                    <xs:enumeration value="hide" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="drop">
        <xs:annotation>
            <xs:documentation>Drop an object, or a set of objects. This rules is not used for counters (money, meals and arrows). If you want to decrease a counter, use the "pick" rule.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="objectId" type="xs:string">
            <xs:annotation>
                <xs:documentation>The "objectId" can be one or more object Id, or one of the following :</xs:documentation>
                <xs:documentation>- allweapons: Drop all weapons (it does not drop special items weapons)</xs:documentation>
                <xs:documentation>- allhandtohand: Drop all hand to hand weapons (it does not drop special items weapons)</xs:documentation>
                <xs:documentation>- allweaponlike: Drop all weapons and special items weapons</xs:documentation>
                <xs:documentation>- backpackcontent: Drop all backpack contents, but not the backpack</xs:documentation>
                <xs:documentation>- currentweapon: Drop the current hand-to-hand weapon</xs:documentation>
                <xs:documentation>- allspecial: Drop all the special items</xs:documentation>
                <xs:documentation>- allmeals: Drop all meals</xs:documentation>
                <xs:documentation>- all: Drop all (weapons, backpack, special items, and money)</xs:documentation>
                <xs:documentation>- allobjects: Drop all objects (weapons, special items, and backpack content, but not the backpack itself)</xs:documentation>
                <xs:documentation>- kaiweapon: Drop the player's Kai Weapon</xs:documentation>
                <xs:documentation>If you set more than one object id, the first one owned by the player will be dropped</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="backpackItemSlots" type="xs:string">
            <xs:annotation>
                <xs:documentation>Drop objects on some given Backpack index positions (1-based)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="weaponSlots" type="xs:string">
            <xs:annotation>
                <xs:documentation>Drop objects on some given Weapon index positions (1-based)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="specialItemSlots" type="xs:string">
            <xs:annotation>
                <xs:documentation>Drop objects on some given Special Items index positions (1-based)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="restorePoint" type="xs:string">
            <xs:annotation>
                <xs:documentation>If specified, the dropped item can be restored with the rule "restoreInventoryState", with the given restore point id.</xs:documentation>
            </xs:annotation>
        </xs:attribute>        
        <xs:attribute name="count" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>If specified (1 by default), drop the specified number of items.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="disableCombats">
        <xs:annotation>
            <xs:documentation>By default disables all section combats. If the optional property "disabled" is set to "false", all section combats will be re-enabled</xs:documentation>
        </xs:annotation>
        <xs:attribute name="disabled" type="xs:boolean" />
    </xs:complexType>

    <xs:complexType name="combatSkill">
        <xs:annotation>
            <xs:documentation>Increase / decrease the original player combat skill (permanent).</xs:documentation>
        </xs:annotation>
        <xs:attribute name="count" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>The amount of combat skill points gained/lost</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="toast" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If true, a toast will be displayed with the CS increase / decrease.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="randomTableIncrement">
        <xs:annotation>
            <xs:documentation>Will add a bonus to the random value picked.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="increment" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The increment to apply. "reset" will reset to zero any previous increment.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Index (0-based) of the random table affected by this increment</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="currentWeapon">
        <xs:annotation>
            <xs:documentation>Changes the player current weapon to the set on "objectId" property</xs:documentation>
        </xs:annotation>
        <xs:attribute name="objectId" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="numberPicker">
        <xs:annotation>
            <xs:documentation>Add a control on the UI to select a number.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="enabled" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If set to false, disable the number picker</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="money" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Set to true if value correspond to a number of money</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="actionButton" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text displayed in the button</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text displayed in the number picker UI</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="min" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Minimal value</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="max" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Maximal value</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currency" type="currency">
            <xs:annotation>
                <xs:documentation>Optional, and only for "money"="true". The currency to check for limits.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="index" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Required, for ugly reasons, when there are two or more numberPicker rules on a section.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="disciplinePicker">
        <xs:annotation>
            <xs:documentation>Add a control on the UI to select a discipline from the player's currently active disciplines.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="enabled" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If set to false, disable the discipline picker</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="actionButton" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text displayed in the button</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text displayed in the discipline picker UI</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="confirmText" type="xs:string">
            <xs:annotation>
                <xs:documentation>Optional: text (from translations) displayed as a confirmation text before completing the action</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="kaiWeaponPicker">
        <xs:annotation>
            <xs:documentation>Add a control on the UI to select a Kai Weapon.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="enabled" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If set to false, disable the Kai Weapon picker</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="actionButton" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text displayed in the button</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Text displayed in the Kai Weapon picker UI</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="confirmText" type="xs:string">
            <xs:annotation>
                <xs:documentation>Optional: text (from translations) displayed as a confirmation text before completing the action</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    
    <xs:complexType name="huntStatus">
        <xs:annotation>
            <xs:documentation>This will enable or disable the hunting on meals until new advice. This will be used on map zones where there is no food (deserts, etc).</xs:documentation>
        </xs:annotation>
        <xs:attribute name="enabled" type="xs:boolean" use="required" />
    </xs:complexType>

    <xs:complexType name="sell">
        <xs:annotation>
            <xs:documentation>This will allow to the player to sell a class of objects by a given price.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="objectId" type="xs:string">
            <xs:annotation>
                <xs:documentation>The object id you can sell.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="xs:string">
            <xs:annotation>
                <xs:documentation>special : You can sell any Special Item object</xs:documentation>
                <xs:documentation>weapon : You can sell any Weapon object</xs:documentation>
                <xs:documentation>object : You can sell any Backpack Item object</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="except" type="xs:string">
            <xs:annotation>
                <xs:documentation>Only applies if "class" was specified. Objects id that you cannot sell.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="price" type="xs:nonNegativeInteger" use="required">
            <xs:annotation>
                <xs:documentation>The money got by selling the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="currency" type="currency">
            <xs:annotation>
                <xs:documentation>Optional. If it's set, the currency of the price to sell the object. Default is Gold Crowns.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="count" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Only applies if id = 'quiver' (number of arrows on the quiver) or id = 'money' (number of Gold Crowns)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="saveInventoryState">
        <xs:annotation>
            <xs:documentation>Store the player current inventory state. It can be used when player loses part of the inventory, and they can be found after.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="restorePoint" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Name of the restore point used to restore the inventory with "restoreInventoryState".</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="objectsType">
            <xs:annotation>
                <xs:documentation>Identifies the objects to lose / restore (all by default) :</xs:documentation>
                <xs:documentation>- all: The backpack content, the backpack itself, special items, meals and money</xs:documentation>
                <xs:documentation>- weaponlike: Weapons and weapon-like special items</xs:documentation>
                <xs:documentation>- bow: Bow weapons</xs:documentation>
                <xs:documentation>- backpackitems: The backpack contents</xs:documentation>
                <xs:documentation>- kaiweapon: The player's Kai Weapon (New Order)</xs:documentation>
                <xs:documentation>- allobjects: The backpack contents, special items and meals</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="all" />
                    <xs:enumeration value="weaponlike" />
                    <xs:enumeration value="bow" />
                    <xs:enumeration value="backpackitems" />
                    <xs:enumeration value="kaiweapon" />
                    <xs:enumeration value="allobjects" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="restoreInventoryState">
        <xs:annotation>
            <xs:documentation>Restore the objects lost by the player at the given restorePoint.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="restorePoint" type="xs:string" use="required" />
        <xs:attribute name="restoreWeapons" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
            Identifies if the Weapons, and weapon Special Items should be recovered. Default value is true. If it's false, weapons are not lost, and they can be recovered after with the same restore point.
        </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="goToSection">
        <xs:annotation>
            <xs:documentation>Forces a jump to another section.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="section" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Specifies the section where to jump</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="toast">
        <xs:annotation>
            <xs:documentation>Display a "toast" message.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="text" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Text of the toast.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="duration" type="xs:integer">
            <xs:annotation>
                <xs:documentation>Optional. Toast duration in milliseconds. Default is 5000 ms.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type">
            <xs:annotation>
                <xs:documentation>Optional. Style of the toast. Default is info.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="info" />
                    <xs:enumeration value="warning" />
                    <xs:enumeration value="error" />
                    <xs:enumeration value="success" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="registerGlobalRule">
        <xs:annotation>
            <xs:documentation>"registerGlobalRule" registers a set of rules that will be executed each section.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />

        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Id of the global rule. Used to unregister the global rule.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="unregisterGlobalRule">
        <xs:annotation>
            <xs:documentation>Unregisters the set of rules identified by the given id.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Id of the global rule to unregister.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="objectUsed">
        <xs:annotation>
            <xs:documentation>Event handler for an object use. If some of the objects on the "objectId" property is used on this section, the children rules will be executed.</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />

        <xs:attribute name="objectId" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="textToChoice">
        <xs:annotation>
            <xs:documentation>Replaces a section text by a choice link. This could be needed when there is no link on the original Project AON XML.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="text" type="xs:string" use="required" />
        <xs:attribute name="section" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="kaiMonasteryStorage">
        <xs:annotation>
            <xs:documentation>Add a button to access to the Kai monastery stored objects. It can be added inside "equipmnt" sections only.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="executeOnce">
        <xs:annotation>
            <xs:documentation>Single rules as "drop" have state and they will not be re-executed. If you need the same behaviour on a set of rules, you can use "executeOnce".</xs:documentation>
        </xs:annotation>

        <xs:group ref="any_rule" minOccurs="0" maxOccurs="unbounded" />
    </xs:complexType>

    <xs:complexType name="applyDessiStone">
        <xs:annotation>
            <xs:documentation>Apply the effect of the Dessi Stone on the current weapon (book 17).</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="displayIllustration">
        <xs:annotation>
            <xs:documentation>Displays the first illustration on the "section" attribute section. "text" is an option title to display with the illustration.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="text" type="xs:string">
            <xs:annotation>
                <xs:documentation>Optionnal title to display with the illustration.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="section" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="use">
        <xs:annotation>
            <xs:documentation>Force use of one object.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="objectId" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The object to use. If more than one object is specified, only the first one owned will be used.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="applyEffect" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>Optional. If false, the effect of the object is not applyed (true by default).</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="grandMasterUpgrade">
        <xs:annotation>
            <xs:documentation>Allow to upgrade stats at the Grand Master beginning.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="removeSpecialGrandMaster">
        <xs:annotation>
            <xs:documentation>Carry only allowed Special Items at the Grand Master beginning. Removes Special Items from Action Chart and Kai Monastery.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="runInventoryEvent">
        <xs:annotation>
            <xs:documentation>It runs the "onInventoryEvent" event handler, if it exists on the section.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <!--
        *** SPECIAL SECTIONS ***
    -->

    <xs:complexType name="specialsection_type">
        <xs:annotation>
            <xs:documentation>There are sections (or parts of them) that cannot be described by the game rules. In that case, they are specific implementations.</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <!--
        *** ANY RULE DEFINITION ***
    -->

    <xs:group name="any_rule">
        <xs:choice>
            <xs:element name="tag" type="tag" />
            <xs:element name="setSkills" type="setSkills" />
            <xs:element name="setKaiName" type="setKaiName" />
            <xs:element name="restoreDeliveranceUse" type="restoreDeliveranceUse" />
            <xs:element name="resetNewOrderCuringEPRestoredUse" type="resetNewOrderCuringEPRestoredUse" />
            <xs:element name="setDisciplines" type="setDisciplines" />
            <xs:element name="pick" type="pick" />
            <xs:element name="randomTable" type="randomTable" />
            <xs:element name="randomNumber" type="randomNumber" />
            <xs:element name="chooseEquipment" type="chooseEquipment" />
            <xs:element name="test" type="test" />
            <xs:element name="choiceState" type="choiceState" />
            <xs:element name="object" type="object" />
            <xs:element name="combat" type="combat" />
            <xs:element name="afterCombats" type="afterCombats" />
            <xs:element name="afterElude" type="afterElude" />
            <xs:element name="afterCombatTurn" type="afterCombatTurn" />
            <xs:element name="onInventoryEvent" type="onInventoryEvent" />
            <xs:element name="death" type="death" />
            <xs:element name="useDeliverance" type="useDeliverance" />
            <xs:element name="endurance" type="endurance" />
            <xs:element name="meal" type="meal" />
            <xs:element name="resetSectionState" type="resetSectionState" />
            <xs:element name="message" type="message" />
            <xs:element name="drop" type="drop" />
            <xs:element name="disableCombats" type="disableCombats" />
            <xs:element name="combatSkill" type="combatSkill" />
            <xs:element name="randomTableIncrement" type="randomTableIncrement" />
            <xs:element name="choiceSelected" type="choiceSelected" />
            <xs:element name="currentWeapon" type="currentWeapon" />
            <xs:element name="numberPicker" type="numberPicker" />
            <xs:element name="disciplinePicker" type="disciplinePicker" />
            <xs:element name="huntStatus" type="huntStatus" />
            <xs:element name="sell" type="sell" />
            <xs:element name="saveInventoryState" type="saveInventoryState" />
            <xs:element name="restoreInventoryState" type="restoreInventoryState" />
            <xs:element name="numberPickerChoosed" type="numberPickerChoosed" />
            <xs:element name="disciplinePickerChoosed" type="disciplinePickerChoosed" />
            <xs:element name="goToSection" type="goToSection" />
            <xs:element name="toast" type="toast" />
            <xs:element name="registerGlobalRule" type="registerGlobalRule" />
            <xs:element name="objectUsed" type="objectUsed" />
            <xs:element name="unregisterGlobalRule" type="unregisterGlobalRule" />
            <xs:element name="textToChoice" type="textToChoice" />
            <xs:element name="kaiMonasteryStorage" type="kaiMonasteryStorage" />
            <xs:element name="executeOnce" type="executeOnce" />
            <xs:element name="runInventoryEvent" type="runInventoryEvent" />
            <xs:element name="displayIllustration" type="displayIllustration" />
            <xs:element name="use" type="use" />
            <xs:element name="grandMasterUpgrade" type="grandMasterUpgrade" />
            <xs:element name="removeSpecialGrandMaster" type="removeSpecialGrandMaster" />
            <xs:element name="applyDessiStone" type="applyDessiStone" />
            <xs:element name="disableDiscipline" type="disableDiscipline" />
            <xs:element name="resetNewOrderDisabledDisciplines" type="resetNewOrderDisabledDisciplines" />
            <xs:element name="damageKaiWeapon" type="damageKaiWeapon" />
            <xs:element name="kaiWeaponPicker" type="kaiWeaponPicker" /> 

            <xs:element name="book2Sect238" type="specialsection_type" />
            <xs:element name="book2sect308" type="specialsection_type" />
            <xs:element name="book3sect88" type="specialsection_type" />
            <xs:element name="book6sect26" type="specialsection_type" />
            <xs:element name="book6sect284" type="specialsection_type" />
            <xs:element name="book6sect340" type="specialsection_type" />
            <xs:element name="book9sect91" type="specialsection_type" />
            <xs:element name="book19sect304" type="specialsection_type" />
            <xs:element name="book28sect71" type="specialsection_type" />
            <xs:element name="book28sect192" type="specialsection_type" />
            <xs:element name="book29sect342" type="specialsection_type" />
        </xs:choice>
    </xs:group>

</xs:schema>